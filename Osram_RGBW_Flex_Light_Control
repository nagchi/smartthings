/**
 *  Osram RGBW Light Control
 *
 *  Copyright 2016 Nagaraja Chitters
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Osram RGBW Light Control",
    namespace: "nagchi",
    author: "Nagaraja Chitters",
    description: "Keeps changing color at every one minute if switch is closed",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
	section("Check Switch") {
		input "myswitch", "capability.switch", title: "Which Switch to Check?", required:true, multiple:false
	}
    section("Control these bulbs...") {
		input "hues", "capability.colorControl", title: "Which Hue Bulbs?", required:true, multiple:false
	} 
}

def installed() {
	//log.debug "Installed with settings: ${settings}"
	initialize()
}

def updated() {
	//log.debug "Updated with settings: ${settings}"
	unsubscribe()
	unschedule()
	initialize()
}

def initialize() {
	// TODO: subscribe to attributes, devices, locations, etc.
    
    state.colorCounter = 0
    unschedule(changeLightColors)
	subscribe(myswitch, "switch", switchHandler)
	hues.off()
}

def switchHandler(evt) {
	//log.debug "handler $evt.name: $evt.value"
        
	if (evt.value == "on") {
		changeLightColors()  
    } else {
        unschedule(changeLightColors) 
        hues.off()
    }
}

def changeLightColors() {
	def hueColor = 0
	def saturation = 100
    def colorIndex
    
    colorIndex = incrementCounter()
    //log.debug "Now in changeLightColors with $colorIndex"
    
	switch(colorIndex) {
		case 0:	//"Red":
			hueColor = 100
			break;
		case 1:	//"White":
			hueColor = 52
			saturation = 19
			break;
		case 2:	//"Blue":
			hueColor = 70
			break;
		case 3:	//"Green":
			hueColor = 39
			break;
		case 4:	//"Yellow":
			hueColor = 25
			break;
		case 5:	//"Orange":
			hueColor = 10
			break;
		case 6:	//"Daylight":
			hueColor = 53
			saturation = 91
			break;            
		case 7:	//"Purple":
			hueColor = 75
			break;
		case 8:	//"Pink":
			hueColor = 83
			break;
		case 9:	//"Soft White":
			hueColor = 23
			saturation = 56
			break;
		case 10:	//"Warm White":
			hueColor = 20
			saturation = 80
			break;
	}
    
	state.previous = [:]

	hues.each {
		state.previous[it.id] = [
			"switch": it.currentValue("switch"),
			"level" : it.currentValue("level"),
			"hue": it.currentValue("hue"),
			"saturation": it.currentValue("saturation")
		]
	}

	//log.debug "current values = $state.previous"

	def newValue = [hue: hueColor, saturation: saturation, level: lightLevel as Integer ?: 100]
    
	//log.debug "Changint now to new value = $newValue"

	hues*.setColor(newValue)
        
    schedule("30 0/1 * * * ?", changeLightColors)
}

def incrementCounter() {
	def old = state.colorCounter
    state.colorCounter = state.colorCounter + 1
    
    if (state.colorCounter == 9) {
    	state.colorCounter = 0
    }
    
    return old
}
